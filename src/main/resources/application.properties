spring.application.name=ProjectTracker

# PostgreSQL Configuration
spring.datasource.url=jdbc:postgresql://localhost:5432/${POSTGRES_DB}
spring.datasource.username=${POSTGRES_USER}
spring.datasource.password=${POSTGRES_PASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver

# JPA/Hibernate Configuration
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# MongoDB Configuration (for Audit Logs)
spring.data.mongodb.uri=mongodb://localhost:27017/${MONGO_INITDB_DATABASE}

# SpringDoc OpenAPI (Swagger UI) Configuration
springdoc.api-docs.path=/v3/api-docs
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.swagger-ui.oauth2-redirect-url=http://localhost:8080/swagger-ui/oauth2-redirect.html

# Email Configuration
spring.mail.host=${SMTP_HOST}
spring.mail.port=${SMTP_PORT}
spring.mail.username=${SMTP_USERNAME}
spring.mail.password=${SMTP_PASSWORD}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.starttls.required=true
# spring.mail.properties.mail.smtp.ssl.trust=your-smtp-host (if using self-signed certs)

# --- Application Specific Email Settings ---
# Email address from which notifications will be sent
notification.email.from=${NOTIFICATION_EMAIL_FROM}
# Subject prefix for notification emails
notification.email.subjectPrefix=${NOTIFICATION_EMAIL_SUBJECT_PREFIX}

# --- Security Configuration ---

# OAuth2 Client Configuration - Google
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.scope=email,profile
spring.security.oauth2.client.registration.google.redirect-uri={baseUrl}/oauth2/callback/google
spring.security.oauth2.client.registration.google.client-name=Google
spring.security.oauth2.client.registration.google.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.google.client-authentication-method=client_secret_post

# GitHub OAuth2 - REMOVED (focusing on Google OAuth2 only)

# App Properties - JWT Configuration
app.auth.tokenSecret=${APP_AUTH_TOKENSECRET:your-256-bit-secret-make-this-very-long-and-secure-in-production}
# JWT token expires in 30 minutes (1800000 ms) as per security requirements
app.auth.tokenExpirationMsec=${APP_AUTH_TOKENEXPIRATIONMSEC:1800000}
# Refresh token expires in 7 days (604800000 ms)
app.auth.refreshTokenExpirationMsec=${APP_AUTH_REFRESHTOKENEXPIRATIONMSEC:604800000}

# Whitelisted redirect URIs for OAuth2 clients
# This list is used by the OAuth2AuthenticationSuccessHandler to validate the redirect URI from the cookie.
# It should contain all valid URIs that your frontend might use to initiate the OAuth2 flow.
app.oauth2.authorized-redirect-uris=http://localhost:3000/oauth2/redirect,http://localhost:8080/swagger-ui/oauth2-redirect.html,http://localhost:3000/login,http://localhost:8080/login,${APP_URL:http://localhost:8080}

# SpringDoc OpenAPI UI Configuration
# This is used to configure the "Authorize" button in Swagger UI.
# NOTE: We only expose client-id to Swagger UI, NEVER the client secret for security
springdoc.swagger-ui.oauth.client-id=${GOOGLE_CLIENT_ID:}
springdoc.swagger-ui.oauth.client-secret=${GOOGLE_CLIENT_SECRET:}
springdoc.swagger-ui.oauth.use-pkce-with-authorization-code-grant=false
springdoc.swagger-ui.oauth.scopes=openid,profile,email

# OAuth2 Provider Configuration
spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/v2/auth
spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v3/userinfo
spring.security.oauth2.client.provider.google.user-name-attribute=name

# GitHub provider configuration removed - focusing on Google OAuth2 only

# Server Configuration
server.port=8080

# Security Best Practices
# Force HTTPS in production (uncomment for production)
# server.ssl.enabled=true
# server.ssl.key-store=classpath:keystore.p12
# server.ssl.key-store-password=changeit
# server.ssl.key-store-type=PKCS12
# server.ssl.key-alias=projecttracker

# Security Headers
server.servlet.session.cookie.secure=false
server.servlet.session.cookie.http-only=true
server.servlet.session.cookie.same-site=lax

# Input Validation
spring.mvc.throw-exception-if-no-handler-found=true
spring.web.resources.add-mappings=false

# Enable OAuth2 debugging
logging.level.org.springframework.security=DEBUG
logging.level.org.springframework.security.oauth2=DEBUG
logging.level.com.example.clb.projecttracker.security.oauth2=DEBUG

# Actuator Configuration
management.endpoints.web.exposure.include=health,info,metrics,prometheus,caches,env,loggers,heapdump
management.endpoint.health.show-details=always
management.endpoint.health.show-components=always
management.metrics.export.prometheus.enabled=true
management.metrics.distribution.percentiles-histogram.http.server.requests=true
management.metrics.distribution.sla.http.server.requests=50ms,100ms,200ms,500ms
management.endpoints.web.base-path=/actuator
management.endpoints.web.cors.allowed-origins=*
management.endpoints.web.cors.allowed-methods=GET,POST
# Disable security for Actuator endpoints
management.endpoint.health.roles=
management.endpoint.prometheus.roles=
management.endpoints.enabled-by-default=true
management.endpoints.web.exposure.exclude=
management.endpoints.jmx.exposure.include=*

# JVM Memory Configuration
spring.jvm.memory.max-heap-size=512M
spring.jvm.memory.initial-heap-size=256M

# Transaction logging
logging.level.org.springframework.transaction=DEBUG
logging.level.org.hibernate.SQL=DEBUG
# Comment the following line in production, as it can affect performance
#logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
